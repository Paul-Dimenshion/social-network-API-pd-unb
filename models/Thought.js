const { Schema, model, Types } = require('mongoose'); // This line imports the mongoose package and destructures three properties from it: Schema, model, and Types.
const moment = require('moment'); // This line imports the moment package, which is used for date formatting.

/* This block of code defines a Mongoose schema for reactions.
The schema has four properties: reactionId, reactionBody, username, and createdAt.
reactionId is an ObjectId generated by Mongoose. It is used as the primary key for the reactions collection.
reactionBody is a required string that has a maximum length of 280 characters.
username is a required string that specifies the user who posted the reaction.
createdAt is a date that defaults to the current date and time. The get function formats the date using the moment library.
The second argument to the Schema constructor is an options object. It sets virtuals and getters to true, and sets id to false. This means that virtual properties and getter functions will be included in the output JSON, but the _id field will not. */
const ReactionSchema = new Schema({
    reactionId: {
        type: Schema.Types.ObjectId,
        default: () => new Types.ObjectId()
    },
    reactionBody: {
        type: String,
        required: true,
        maxlength: 280
    },
    username: {
        type: String,
        required: true
    },
    createdAt: {
        type: Date,
        default: Date.now,
        get: createdAtVal => moment(createdAtVal).format('MMM DD, YYYY [at] hh:mm a')
    }
},
    {
        toJSON: {
            virtuals: true,
            getters: true
        },
        id: false
    }
);

/* This block of code defines a Mongoose schema for thoughts.
The schema has four properties: thoughtText, createdAt, username, and reactions.
thoughtText is a required string that has a minimum length of 1 character and a maximum length of 280 characters.
createdAt is a date that defaults to the current date and time. The get function formats the date using the moment library.
username is a required string that specifies the user who posted the thought.
reactions is an array of ReactionSchema subdocuments that represent the reactions associated with a thought.
The second argument to the Schema constructor is an options object, just like in the previous block of code.*/
const ThoughtSchema = new Schema({
    thoughtText: {
        type: String,
        required: true,
        minlength: 1,
        maxlength: 280
    },
    createdAt: {
        type: Date,
        default: Date.now,
        get: createdAtVal => moment(createdAtVal).format('MMM DD, YYYY [at] hh:mm a')
    },
    username: {
        type: String,
        required: true
    },
    reactions: [ReactionSchema]
},

    {
        toJSON: {
            virtuals: true,
            getters: true
        },
        id: false
    }
);

/* This block of code defines a virtual property for the ThoughtSchema. 
The reactionCount property returns the length of the reactions array. */
ThoughtSchema.virtual('reactionCount').get(function () {
    return this.reactions.length;
});

// create the Thought model using the ThoughtSchema
const Thought = model('Thought', ThoughtSchema);

// export the Thought model
module.exports = Thought;